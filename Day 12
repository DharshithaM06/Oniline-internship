# 1) Reverse Doubly Linked List


class Node:
    def __init__(link, data):
        # Initialize node with data and pointers 
        link.data = data
        link.next = None
        link.prev = None

class DoublyLinkedList:
    def __init__(link):
        # Initialize head and tail of list to None
        link.head = None
        link.tail = None

    def append(link, data):
        # Create a new node with given data
        new_node = Node(data)
        # If the list is empty, set head and tail to new node
        if link.head is None:
            link.head = new_node
            link.tail = new_node
        else:
            # Link new node to current tail and update tail
            new_node.prev = link.tail
            link.tail.next = new_node
            link.tail = new_node

    def print_list(link):
        # Traverse list from head to tail and print each node's data
        current = link.head
        while current:
            print(current.data, end=" ")
            current = current.next
        print()

    def reverse_list(link):
        # Initialize previous and current pointers
        prev_node = None
        current = link.head
        # Traverse list and reverse links
        while current:
            next_node = current.next
            current.next = prev_node
            current.prev = next_node
            prev_node = current
            current = next_node
        # Update head and tail pointers
        link.head, link.tail = prev_node, link.head

def main():
    dll = DoublyLinkedList()
    # Ask user for elements
    num_elements = int(input("Enter the number of elements: "))
    for start in range(num_elements):
        data = int(input(f"Enter element {start+1}: "))
        dll.append(data)
    print("Original List: ")
    dll.print_list()
    dll.reverse_list()
    print("Reversed List: ")
    dll.print_list()

if __name__ == "__main__":
    main()
